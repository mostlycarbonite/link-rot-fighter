// Generated by CoffeeScript 1.9.3
(function() {
  var WebCapture, captureHeight, captureWidth, capturesSavePath, fs, ld, moment, path, sanitize, urlLib, webshotLib, yamlLib,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  webshotLib = require('webshot');

  capturesSavePath = process.env.LRF_HOSTS_PATH || 'captures';

  captureHeight = process.env.LRF_HEIGHT || 'all';

  captureWidth = process.env.LRF_WIDTH || 1440;

  path = require('path');

  urlLib = require('url');

  sanitize = require("sanitize-filename");

  fs = require('fs');

  yamlLib = require('yamljs');

  moment = require('moment');

  ld = require('lodash');

  WebCapture = (function() {
    function WebCapture(saveDir) {
      this.capture = bind(this.capture, this);
    }

    WebCapture.prototype.capture = function(url, cb) {
      var afterWebshotComplete, afterYamlLoad, capturePath, fileName, hostName, pathWithHost, yamlPath;
      hostName = new urlLib.parse(url).hostname;
      fileName = sanitize(url).replace(".", "_");
      pathWithHost = path.join(process.cwd(), capturesSavePath, sanitize(hostName));
      this.captureList = null;
      yamlPath = path.join(capturesSavePath, 'captures.yaml');
      capturePath = path.join(pathWithHost, fileName + "-" + (new moment().format('DD-MMM-YYYY')) + ".png");
      afterYamlLoad = (function(_this) {
        return function(captureList) {
          var options;
          if (captureList != null) {
            _this.captureList = captureList;
          } else {
            captureList = [];
          }
          options = {
            shotSize: {
              width: captureWidth,
              height: captureHeight
            }
          };
          if (!ld.find(_this.captureList, {
            site: hostName,
            url: url
          })) {
            return webshotLib(url, capturePath, options, afterWebshotComplete);
          }
        };
      })(this);
      afterWebshotComplete = (function(_this) {
        return function(err) {
          var base, hostObj;
          if (typeof err === "function" ? err(cb(err, null)) : void 0) {

          } else {

            /*
              structure is:
            
                site: host name
                  captures: [
                    url: image path
                    url: image path
                    url: image path
                  ]
             */
            debugger;
            if (_this.captureList == null) {
              _this.captureList = [];
            }
            hostObj = null;
            if (!ld.find(_this.captureList, {
              site: {
                baseUrl: hostName
              }
            })) {
              hostObj = {
                site: {
                  baseUrl: hostName,
                  captures: []
                }
              };
              _this.captureList.push(hostObj);
            } else {
              hostObj = ld.find(_this.captureList, {
                site: {
                  baseUrl: hostName
                }
              });
            }
            if (!ld.find(hostObj.site.captures, {
              url: url,
              capturePath: capturePath
            })) {
              ((base = hostObj.site).captures != null ? base.captures : base.captures = []).push({
                url: url,
                capturePath: capturePath
              });
            }
            return fs.writeFile(yamlPath, yamlLib.stringify(_this.captureList), function(err) {
              if (err) {
                return typeof cb === "function" ? cb(err, null) : void 0;
              } else {
                return cb(null, capturePath);
              }
            });
          }
        };
      })(this);
      return yamlLib.load(yamlPath, afterYamlLoad);
    };

    return WebCapture;

  })();

  module.exports = WebCapture;

}).call(this);

//# sourceMappingURL=webCapture.js.map
