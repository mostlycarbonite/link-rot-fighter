// Generated by CoffeeScript 1.9.3
(function() {
  var formOutput, http, jsonify, qs, server, serverPort;

  http = require('http');

  qs = require('querystring');

  jsonify = require('json-stringify-safe');

  formOutput = '<html><body>' + '<h1>XYZ Repository Commit Monitor</h1>' + '<form method="post" action="inbound" enctype="application/x-www-form-urlencoded"><fieldset>' + '<div><label for="UserName">User Name:</label><input type="text" id="UserName" name="UserName" /></div>' + '<div><label for="Repository">Repository:</label><input type="text" id="Repository" name="Repository" /></div>' + '<div><label for="Branch">Branch:</label><input type="text" id="Branch" name="Branch" value="master" /></div>' + '<div><input id="ListCommits" type="submit" value="List Commits" /></div></fieldset></form></body></html>';

  serverPort = process.env.LRF_PORT || 7777;

  server = http.createServer(function(request, response) {
    var requestBody;
    if (request.method === 'GET') {
      if (request.url === '/favicon.ico') {
        response.writeHead(404, {
          'Content-Type': 'text/html'
        });
        response.write('<!doctype html><html><head><title>404</title></head><body>404: Resource Not Found</body></html>');
        return response.end();
      } else {
        response.writeHead(200, {
          'Content-Type': 'text/html'
        });
        return response.end("<html>\n<body>\n<h1>Link Rot Fighter</h1>\n<p>POST a url to this address to capture a page and store it to the file system.</p>\n\n<p>Files are stored in directories that match their base url (google for http://google.com for instance). The image file names are UUIDs and stored next to a file called url.txt that contains the url that the image was pulled from. </p>\n\n</body></html>\n");
      }
    } else if (request.method === 'POST') {
      console.log("POST received");
      if (request.url === '/scrape') {
        requestBody = '';
        return request.on('data', function(data) {
          requestBody += data;
          if (requestBody.length > 1e7) {
            response.writeHead(413, 'Request Entity Too Large', {
              'Content-Type': 'text/html'
            });
            response.end('<!doctype html><html><head><title>413</title></head><body>413: Request Entity Too Large</body></html>');
          }
          return request.on('end', function() {
            var ais, formData, hadError, wc;
            formData = qs.parse(requestBody);
            response.writeHead(200, {
              'Content-Type': 'text/html'
            });
            if (formData.url != null) {
              console.dir('capturing ' + formData.url);
              wc = new (require('./webCapture'))();
              ais = new (require('./archiveIS'))();
              hadError = function(err) {
                if (err != null) {
                  console.error(jsonify(err));
                  response.write("<p>Failed: " + err + "</p>");
                  response.end();
                  return true;
                } else {
                  return false;
                }
              };
              return ais.check(formData.url, function(err, result) {
                console.log("checked url: " + formData.url);
                if (hadError(err)) {
                  return null;
                }
                if (!result.found) {
                  console.log("saving url with archive.is");
                  return ais.save(formData.url, function(err, result) {
                    if (hadError(err)) {
                      return null;
                    }
                    console.log("capturing url");
                    return wc.capture(formData.url, function(err) {
                      if (hadError(err)) {
                        return null;
                      } else {
                        console.log('capture complete');
                        return response.end("Capture for url: " + formData.url + " -- complete.");
                      }
                    });
                  });
                } else {
                  console.log("Archive has url, no capture needed.");
                  return response.end("No capture needed.");
                }
              });
            }
          });
        });
      } else {
        response.writeHead(404, 'Resource Not Found', {
          'Content-Type': 'text/html'
        });
        return response.end('<!doctype html><html><head><title>404</title></head><body>404: Resource Not Found</body></html>');
      }
    } else {
      response.writeHead(405, 'Method Not Supported', {
        'Content-Type': 'text/html'
      });
      return response.end('<!doctype html><html><head><title>405</title></head><body>405: Method Not Supported</body></html>');
    }
  });

  server.listen(serverPort);

  console.log('Server running at localhost:' + serverPort);

}).call(this);

//# sourceMappingURL=index.js.map
